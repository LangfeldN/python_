import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        boolean boost = false;
        int dist1 = 0;
        int dist2 = 0;
        int x_last = 0:
        int x_last = 0:
        int

        // game loop
        while (true) {
            int x = in.nextInt();
            int y = in.nextInt();
            int nextCheckpointX = in.nextInt(); // x position of the next check point
            int nextCheckpointY = in.nextInt(); // y position of the next check point
            int nextCheckpointDist = in.nextInt(); // distance to the next checkpoint
            int nextCheckpointAngle = in.nextInt(); // angle between your pod orientation and the direction of the next checkpoint
            int opponentX = in.nextInt();
            int opponentY = in.nextInt();

            String outThrust = "100";

            boolean boost = false;
            boolean boostTime = false;

            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");
            // DEBUG:
            System.err.println("x:  " + x);
            System.err.println("y:  " + y);
            System.err.println("nextCheckpointX:  " + nextCheckpointX);
            System.err.println("nextCheckpointY:  " + nextCheckpointY);
            System.err.println("nextCheckpointDist:  " + nextCheckpointDist);
            System.err.println("nextCheckpointAngle:  " + nextCheckpointAngle);
            System.err.println("opponentX:  " + opponentX);
            System.err.println("opponentY:  " + opponentY);
            //System.err.println("" + leng;

            // store curDist

            dist1 = dist1;
            dist2 = nextCheckpointDist;

            if( > 0){boostTime = true;};

            // DistanceCalc
            //    dist1 = DistanceCalc(x,y,nextCheckpointX, nextCheckpointY);
            //    dist2 = DistanceCalc(x,y,nextCheckpointX, nextCheckpointY);

            if((nextCheckpointAngle > 90) || (nextCheckpointAngle < -90)) {
                outThrust = "100";
            } else {
                outThrust = "5";
            };

            if(nextCheckpointDist < 500) {outThrust = "0";};

            if(nextCheckpointAngle < 10) {outThrust = "100";};


            if(nextCheckpointDist > 10000 && nextCheckpointAngle == 0  &&  boost == false && boostTime = true) {
               outThrust="BOOST";
               boost = true;
            };




            // You have to output the target position
            // followed by the power (0 <= thrust <= 100)
            // i.e.: "x y thrust"


            System.out.println(nextCheckpointX + " " + nextCheckpointY + " " + outThrust);


        }

    }

    public static int calcDist(int x1, int y1, int x2, int y2){
        int dx = 0;
        int dy = 0;
        int dist = 0;

        dx = x2 - x1;
        dy = y2 - y1;
        dist =  ((dx*dx)/(dy*dy))^(-1);

        return dist;
        }
}